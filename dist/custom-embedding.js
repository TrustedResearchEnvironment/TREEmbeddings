/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   definition: () => (/* binding */ definition)\n/* harmony export */ });\n/* harmony import */ var _library_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./library-base */ \"./library-base.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass CustomEmbed extends _library_base__WEBPACK_IMPORTED_MODULE_0__.LibraryBase {\n    constructor(element, entityUrl, params, settings, errorCallback) {\n        super(element, entityUrl, params, settings, errorCallback);\n        this.token = \"\";\n        this.loadResources = () => __awaiter(this, void 0, void 0, function* () {\n            yield this.getAccessToken();\n            yield this.buildPage();\n        });\n        this.getAccessToken = () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            try {\n                // A way to get the runtime param passed down from the portal\n                const authId = (_a = this.getParamValue('ApiAuthRequestId')) === null || _a === void 0 ? void 0 : _a.value;\n                const authResponse = yield window.loomeApi.runApiRequest(authId);\n                this.token = authResponse.access_token;\n            }\n            catch (ex) {\n                // Additional debug logs, won't hurt to get additional raw info\n                console.log(ex);\n                const error = ex;\n                this.errorCallback(\"Error\", \"Unable obtain access token\", error.message, this.element);\n            }\n        });\n        this.buildPage = () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            try {\n                // Fetch and parse the dataset data\n                // Generated by Copilot\n                const DataSet = yield window.loomeApi.runApiRequest(6, {\n                    DataSetID: ((_a = this.getParamValue('DataSetID')) === null || _a === void 0 ? void 0 : _a.value) || '',\n                });\n                // Now let's generate the HTML for the columns\n                let columnsHtml = '';\n                if (DataSet.DataSetColumns && Array.isArray(DataSet.DataSetColumns)) {\n                    DataSet.DataSetColumns.forEach((column) => {\n                        columnsHtml += `\r\n                        <tr>\r\n                            <td>${column.ColumnName || ''}</td>\r\n                            <td class=\"datatype-column\">${column.ColumnType || ''}</td>\r\n                            <td>${column.LogicalColumnName || ''}</td>\r\n                            <td>${column.BusinessDescription || 'N/A'}</td>\r\n                            <td>${column.ExampleValue || 'N/A'}</td>\r\n                            <td>${column.Redact ? 'Yes' : 'No'}</td>\r\n                            <td>${column.Tokenise ? 'Yes' : 'No'}</td>\r\n                            <td>${column.IsFilter ? 'Yes' : 'No'}</td>\r\n                        </tr>\r\n                    `;\n                    });\n                }\n                // --- 1. Generate the HTML structure ---\n                const datasetHtml = `\r\n                <div class=\"dataset-container\">\r\n                    <!-- Breadcrumb navigation -->\r\n                    <div class=\"breadcrumb\">\r\n                        <span>Datasets</span>\r\n                        <span class=\"separator\">›</span>\r\n                        <span class=\"current\">Dataset Details</span>\r\n                    </div>\r\n                    \r\n                    <div class=\"dataset-card\">\r\n                        <div class=\"dataset-header\">\r\n                            <h2>${DataSet.Name}</h2>\r\n                            <div class=\"metadata\">\r\n                                <span class=\"metadata-item\">ID: ${DataSet.DataSetID}</span>\r\n                                <span class=\"metadata-item\">Owner: ${DataSet.Owner}</span>\r\n                                <span class=\"metadata-item\">Modified: ${new Date(DataSet.ModifiedDate).toLocaleDateString()}</span>\r\n                            </div>\r\n                            <div class=\"dataset-description\">\r\n                                <p>${DataSet.Description}</p>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <!-- Clear all filters button -->\r\n                        <div class=\"clear-all-filters-container\">\r\n                            <button id=\"clearAllFilters\" class=\"clear-all-filters\">\r\n                                <i class=\"icon-refresh\"></i> Clear All Filters & Sorting\r\n                            </button>\r\n                        </div>\r\n                        \r\n                        <!-- Columns table -->\r\n                        <div class=\"table-container\">\r\n                            <table class=\"columns-table\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th class=\"sortable\" data-sort=\"name\">Column Name <span class=\"sort-indicator\">▼</span></th>\r\n                                        <th class=\"sortable\" data-sort=\"type\">Data Type <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"logical\">Logical Name <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"description\">Description <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"example\">Example <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"redacted\">Redacted <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"tokenized\">Tokenized <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"filter\">Filter <span class=\"sort-indicator\"></span></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody id=\"columnsTableBody\">\r\n                                    ${columnsHtml}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Add the action buttons -->\r\n                    <div class=\"dataset-actions\">\r\n                        <button id=\"viewDictionaryBtn\" class=\"btn btn-primary\">\r\n                            <i class=\"icon-dictionary\"></i> View Data Dictionary\r\n                        </button>\r\n                        <button id=\"requestDatasetBtn\" class=\"btn btn-success\">\r\n                            <i class=\"icon-request\"></i> Request Dataset\r\n                        </button>\r\n                        <button id=\"exportBtn\" class=\"btn btn-export\">\r\n                            <i class=\"icon-download\"></i> Export to CSV\r\n                        </button>\r\n                        <button id=\"helpBtn\" class=\"btn btn-help\">\r\n                            <i class=\"icon-help\"></i> Help & Tips\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    <!-- Data Dictionary Modal -->\r\n                    <div id=\"viewDictionaryModal\" class=\"modal\">\r\n                        <div class=\"modal-content\">\r\n                            <div class=\"modal-header\">\r\n                                <h3>Data Dictionary</h3>\r\n                                <span class=\"close\">&times;</span>\r\n                            </div>\r\n                            <div class=\"modal-body\" id=\"viewDictionaryModalBody\">\r\n                                <!-- Will be populated by JavaScript -->\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Request Dataset Modal -->\r\n                    <div id=\"requestDatasetModal\" class=\"modal\">\r\n                        <div class=\"modal-content\">\r\n                            <div class=\"modal-header\">\r\n                                <h3>Request Dataset</h3>\r\n                                <span class=\"close\">&times;</span>\r\n                            </div>\r\n                            <div class=\"modal-body\" id=\"requestDatasetModalBody\">\r\n                                <!-- Will be populated by JavaScript -->\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Help Modal -->\r\n                    <div id=\"helpModal\" class=\"modal\">\r\n                        <div class=\"modal-content\">\r\n                            <div class=\"modal-header\">\r\n                                <h3>Help & Tips</h3>\r\n                                <span class=\"close\">&times;</span>\r\n                            </div>\r\n                            <div class=\"modal-body\">\r\n                                <h4>Sorting</h4>\r\n                                <p>Click on any column header to sort the data by that column. Click again to toggle between ascending and descending order.</p>\r\n                                \r\n                                <h4>Filtering</h4>\r\n                                <p>Use the filter box in the Data Dictionary view to quickly find specific columns by typing part of the name, data type, or description.</p>\r\n                                \r\n                                <h4>Exporting</h4>\r\n                                <p>Click the \"Export to CSV\" button to download the current view as a CSV file that can be opened in Excel or other spreadsheet applications.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\n                // --- 2. Add styles ---\n                const styles = `\r\n                <style>\r\n                    /* Main container styles */\r\n                    .dataset-container {\r\n                        font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\r\n                        max-width: 1200px;\r\n                        margin: 0 auto;\r\n                        padding: 20px;\r\n                    }\r\n                    \r\n                    /* Breadcrumb navigation */\r\n                    .breadcrumb {\r\n                        display: flex;\r\n                        align-items: center;\r\n                        margin-bottom: 20px;\r\n                        font-size: 14px;\r\n                        color: #666;\r\n                    }\r\n                    \r\n                    .breadcrumb .separator {\r\n                        margin: 0 8px;\r\n                        color: #999;\r\n                    }\r\n                    \r\n                    .breadcrumb .current {\r\n                        font-weight: 600;\r\n                        color: #333;\r\n                    }\r\n                    \r\n                    /* Dataset card */\r\n                    .dataset-card {\r\n                        background-color: #fff;\r\n                        border-radius: 8px;\r\n                        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n                        padding: 25px;\r\n                        margin-bottom: 20px;\r\n                    }\r\n                    \r\n                    /* Dataset header */\r\n                    .dataset-header {\r\n                        margin-bottom: 20px;\r\n                    }\r\n                    \r\n                    .dataset-header h2 {\r\n                        color: #2c3e50;\r\n                        margin-top: 0;\r\n                        margin-bottom: 15px;\r\n                        font-size: 24px;\r\n                    }\r\n                    \r\n                    /* Metadata display */\r\n                    .metadata {\r\n                        display: flex;\r\n                        flex-wrap: wrap;\r\n                        gap: 12px;\r\n                        margin-bottom: 15px;\r\n                    }\r\n                    \r\n                    .metadata-item {\r\n                        background-color: #e9f7fe;\r\n                        padding: 6px 12px;\r\n                        border-radius: 4px;\r\n                        color: #2980b9;\r\n                        font-size: 14px;\r\n                    }\r\n                    \r\n                    /* Dataset description */\r\n                    .dataset-description {\r\n                        line-height: 1.6;\r\n                        color: #555;\r\n                        margin-bottom: 20px;\r\n                        white-space: pre-line;\r\n                        padding: 10px 0;\r\n                        border-bottom: 1px solid #eee;\r\n                    }\r\n                    \r\n                    /* Clear all filters button */\r\n                    .clear-all-filters-container {\r\n                        margin-bottom: 15px;\r\n                    }\r\n                    \r\n                    .clear-all-filters {\r\n                        width: 100%;\r\n                        padding: 10px;\r\n                        background-color: #f5f5f5;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 4px;\r\n                        color: #555;\r\n                        font-weight: 500;\r\n                        cursor: pointer;\r\n                        display: flex;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                        gap: 8px;\r\n                        transition: background-color 0.2s;\r\n                    }\r\n                    \r\n                    .clear-all-filters:hover {\r\n                        background-color: #e9e9e9;\r\n                    }\r\n                    \r\n                    .icon-refresh::before {\r\n                        content: \"↻\";\r\n                        display: inline-block;\r\n                        margin-right: 5px;\r\n                    }\r\n                    \r\n                    /* Table container */\r\n                    .table-container {\r\n                        overflow-x: auto;\r\n                        margin-bottom: 20px;\r\n                        border: 1px solid #eee;\r\n                        border-radius: 4px;\r\n                    }\r\n                    \r\n                    /* Columns table */\r\n                    .columns-table {\r\n                        width: 100%;\r\n                        border-collapse: collapse;\r\n                    }\r\n                    \r\n                    .columns-table th,\r\n                    .columns-table td {\r\n                        padding: 12px 15px;\r\n                        text-align: left;\r\n                        border-bottom: 1px solid #eee;\r\n                    }\r\n                    \r\n                    .columns-table th {\r\n                        background-color: #f5f8fa;\r\n                        color: #2c3e50;\r\n                        font-weight: 600;\r\n                        position: sticky;\r\n                        top: 0;\r\n                    }\r\n                    \r\n                    .columns-table tbody tr:hover {\r\n                        background-color: #f9fafb;\r\n                    }\r\n                    \r\n                    /* Sortable columns */\r\n                    .sortable {\r\n                        cursor: pointer;\r\n                        user-select: none;\r\n                        position: relative;\r\n                    }\r\n                    \r\n                    .sortable:hover {\r\n                        background-color: #eef2f5;\r\n                    }\r\n                    \r\n                    .sort-indicator {\r\n                        font-size: 10px;\r\n                        margin-left: 5px;\r\n                        opacity: 0.5;\r\n                    }\r\n                    \r\n                    .sortable[data-sort-direction=\"asc\"] .sort-indicator {\r\n                        opacity: 1;\r\n                        content: \"▲\";\r\n                    }\r\n                    \r\n                    .sortable[data-sort-direction=\"desc\"] .sort-indicator {\r\n                        opacity: 1;\r\n                        content: \"▼\";\r\n                    }\r\n                    \r\n                    /* Data type column styling */\r\n                    .datatype-column {\r\n                        font-family: monospace;\r\n                        background-color: #f5f8fa;\r\n                        padding: 2px 6px;\r\n                        border-radius: 3px;\r\n                        border: 1px solid #e5e9ed;\r\n                    }\r\n                    \r\n                    /* Action buttons */\r\n                    .dataset-actions {\r\n                        display: flex;\r\n                        gap: 12px;\r\n                        margin-bottom: 20px;\r\n                        flex-wrap: wrap;\r\n                    }\r\n                    \r\n                    .btn {\r\n                        display: inline-flex;\r\n                        align-items: center;\r\n                        gap: 8px;\r\n                        padding: 10px 16px;\r\n                        border: none;\r\n                        border-radius: 4px;\r\n                        color: white;\r\n                        font-weight: 500;\r\n                        cursor: pointer;\r\n                        transition: background-color 0.2s, transform 0.1s;\r\n                    }\r\n                    \r\n                    .btn:hover {\r\n                        transform: translateY(-1px);\r\n                    }\r\n                    \r\n                    .btn:active {\r\n                        transform: translateY(0);\r\n                    }\r\n                    \r\n                    .btn-primary {\r\n                        background-color: #3498db;\r\n                    }\r\n                    \r\n                    .btn-primary:hover {\r\n                        background-color: #2980b9;\r\n                    }\r\n                    \r\n                    .btn-success {\r\n                        background-color: #2ecc71;\r\n                    }\r\n                    \r\n                    .btn-success:hover {\r\n                        background-color: #27ae60;\r\n                    }\r\n                    \r\n                    .btn-export {\r\n                        background-color: #27ae60;\r\n                        color: white;\r\n                    }\r\n                    \r\n                    .btn-export:hover {\r\n                        background-color: #219653;\r\n                    }\r\n                    \r\n                    .btn-help {\r\n                        background-color: #f39c12;\r\n                        color: white;\r\n                    }\r\n                    \r\n                    .btn-help:hover {\r\n                        background-color: #d35400;\r\n                    }\r\n                    \r\n                    .btn-default {\r\n                        background-color: #95a5a6;\r\n                    }\r\n                    \r\n                    .btn-default:hover {\r\n                        background-color: #7f8c8d;\r\n                    }\r\n                    \r\n                    .btn-accent {\r\n                        background-color: #9b59b6;\r\n                    }\r\n                    \r\n                    .btn-accent:hover {\r\n                        background-color: #8e44ad;\r\n                    }\r\n                    \r\n                    /* Icons */\r\n                    .icon-dictionary::before {\r\n                        content: \"📘\";\r\n                        display: inline-block;\r\n                    }\r\n                    \r\n                    .icon-request::before {\r\n                        content: \"📝\";\r\n                        display: inline-block;\r\n                    }\r\n                    \r\n                    .icon-download::before {\r\n                        content: \"📥\";\r\n                        display: inline-block;\r\n                    }\r\n                    \r\n                    .icon-help::before {\r\n                        content: \"❓\";\r\n                        display: inline-block;\r\n                    }\r\n                    \r\n                    /* Modal styles */\r\n                    .modal {\r\n                        display: none;\r\n                        position: fixed;\r\n                        z-index: 1000;\r\n                        left: 0;\r\n                        top: 0;\r\n                        width: 100%;\r\n                        height: 100%;\r\n                        overflow: auto;\r\n                        background-color: rgba(0, 0, 0, 0.4);\r\n                    }\r\n                    \r\n                    .modal-content {\r\n                        background-color: #fefefe;\r\n                        margin: 5% auto;\r\n                        padding: 20px;\r\n                        border-radius: 8px;\r\n                        width: 80%;\r\n                        max-width: 900px;\r\n                        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n                        max-height: 80vh;\r\n                        overflow-y: auto;\r\n                    }\r\n                    \r\n                    .modal-header {\r\n                        padding-bottom: 15px;\r\n                        margin-bottom: 20px;\r\n                        border-bottom: 1px solid #eee;\r\n                        display: flex;\r\n                        justify-content: space-between;\r\n                        align-items: center;\r\n                    }\r\n                    \r\n                    .modal-header h3 {\r\n                        margin: 0;\r\n                        color: #2c3e50;\r\n                        font-size: 20px;\r\n                    }\r\n                    \r\n                    .close {\r\n                        color: #aaa;\r\n                        font-size: 28px;\r\n                        font-weight: bold;\r\n                        cursor: pointer;\r\n                    }\r\n                    \r\n                    .close:hover {\r\n                        color: #333;\r\n                    }\r\n                    \r\n                    /* Form styles */\r\n                    .form-group {\r\n                        margin-bottom: 20px;\r\n                    }\r\n                    \r\n                    .form-control, .form-select {\r\n                        width: 100%;\r\n                        padding: 10px 12px;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 4px;\r\n                        box-sizing: border-box;\r\n                        font-size: 15px;\r\n                    }\r\n                    \r\n                    .form-control:focus, .form-select:focus {\r\n                        border-color: #3498db;\r\n                        outline: none;\r\n                        box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);\r\n                    }\r\n                    \r\n                    label {\r\n                        display: block;\r\n                        margin-bottom: 6px;\r\n                        font-weight: 500;\r\n                        color: #333;\r\n                    }\r\n                    \r\n                    /* Filter container */\r\n                    .filter-container {\r\n                        display: flex;\r\n                        margin-bottom: 20px;\r\n                        gap: 10px;\r\n                    }\r\n                    \r\n                    .filter-container input {\r\n                        flex: 1;\r\n                        padding: 10px;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 4px;\r\n                        font-size: 15px;\r\n                    }\r\n                    \r\n                    .filter-container button {\r\n                        padding: 10px 15px;\r\n                        background-color: #eee;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 4px;\r\n                        cursor: pointer;\r\n                        font-weight: 500;\r\n                    }\r\n                    \r\n                    .filter-container button:hover {\r\n                        background-color: #e0e0e0;\r\n                    }\r\n                    \r\n                    /* Help modal styles */\r\n                    #helpModal h4 {\r\n                        margin-top: 20px;\r\n                        margin-bottom: 10px;\r\n                        color: #2c3e50;\r\n                    }\r\n                    \r\n                    #helpModal p {\r\n                        margin-bottom: 15px;\r\n                        line-height: 1.6;\r\n                    }\r\n                    \r\n                    /* Responsive styles */\r\n                    @media (max-width: 768px) {\r\n                        .dataset-container {\r\n                            padding: 10px;\r\n                        }\r\n                        \r\n                        .dataset-card {\r\n                            padding: 15px;\r\n                        }\r\n                        \r\n                        .dataset-actions {\r\n                            flex-direction: column;\r\n                        }\r\n                        \r\n                        .btn {\r\n                            width: 100%;\r\n                        }\r\n                        \r\n                        .modal-content {\r\n                            width: 95%;\r\n                            margin: 10% auto;\r\n                        }\r\n                    }\r\n                </style>\r\n            `;\n                // --- 3. Set the innerHTML and attach event listeners ---\n                this.element.innerHTML = styles + datasetHtml;\n                // --- 4. Add event handlers after rendering ---\n                setTimeout(() => {\n                    // Get the modal elements\n                    const viewDictionaryModal = document.getElementById('viewDictionaryModal');\n                    const requestDatasetModal = document.getElementById('requestDatasetModal');\n                    const helpModal = document.getElementById('helpModal');\n                    // Get the buttons that open the modals\n                    const viewDictionaryBtn = document.getElementById('viewDictionaryBtn');\n                    const requestDatasetBtn = document.getElementById('requestDatasetBtn');\n                    const helpBtn = document.getElementById('helpBtn');\n                    const exportBtn = document.getElementById('exportBtn');\n                    const clearAllFiltersBtn = document.getElementById('clearAllFilters');\n                    // Get the <span> elements that close the modals\n                    const closeButtons = document.getElementsByClassName('close');\n                    // Table sorting variables\n                    let currentSortColumn = \"name\";\n                    let currentSortDirection = \"desc\";\n                    // Function to sort table\n                    function sortTable(tableId, columnIndex, columnName) {\n                        const table = document.getElementById(tableId);\n                        if (!table)\n                            return;\n                        const tbody = table.querySelector('tbody');\n                        if (!tbody)\n                            return;\n                        const rows = Array.from(tbody.querySelectorAll('tr'));\n                        // Update sort indicators\n                        const headers = table.querySelectorAll('th.sortable');\n                        headers.forEach(header => {\n                            const indicator = header.querySelector('.sort-indicator');\n                            if (indicator) {\n                                indicator.textContent = '';\n                            }\n                            header.removeAttribute('data-sort-direction');\n                        });\n                        // Determine sort direction\n                        if (currentSortColumn === columnName) {\n                            currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';\n                        }\n                        else {\n                            currentSortColumn = columnName;\n                            currentSortDirection = 'asc';\n                        }\n                        // Update current header\n                        const currentHeader = table.querySelector(`th[data-sort=\"${columnName}\"]`);\n                        if (currentHeader) {\n                            const indicator = currentHeader.querySelector('.sort-indicator');\n                            if (indicator) {\n                                indicator.textContent = currentSortDirection === 'asc' ? '▲' : '▼';\n                            }\n                            currentHeader.setAttribute('data-sort-direction', currentSortDirection);\n                        }\n                        // Sort the rows\n                        rows.sort((a, b) => {\n                            const aValue = (a.cells[columnIndex].textContent || '').trim();\n                            const bValue = (b.cells[columnIndex].textContent || '').trim();\n                            // Determine if we're sorting a data type column\n                            if (columnName === 'type') {\n                                // Special comparison for data types\n                                return currentSortDirection === 'asc'\n                                    ? aValue.localeCompare(bValue)\n                                    : bValue.localeCompare(aValue);\n                            }\n                            // Default comparison\n                            return currentSortDirection === 'asc'\n                                ? aValue.localeCompare(bValue)\n                                : bValue.localeCompare(aValue);\n                        });\n                        // Clear the table and re-add sorted rows\n                        while (tbody.firstChild) {\n                            tbody.removeChild(tbody.firstChild);\n                        }\n                        rows.forEach(row => {\n                            tbody.appendChild(row);\n                        });\n                    }\n                    // Function to export table data to CSV\n                    function exportTableToCSV(tableId, filename = '') {\n                        const table = document.getElementById(tableId);\n                        if (!table)\n                            return;\n                        // Generate filename if not provided\n                        if (!filename) {\n                            const date = new Date().toISOString().slice(0, 10);\n                            filename = `Dataset_${DataSet.DataSetID}_${date}.csv`;\n                        }\n                        // Get all rows\n                        const rows = table.querySelectorAll('tr');\n                        // Prepare CSV content\n                        const csvContent = [];\n                        // Process each row\n                        rows.forEach(row => {\n                            const rowData = [];\n                            const cells = row.querySelectorAll('th, td');\n                            cells.forEach(cell => {\n                                // Get text content and escape quotes\n                                let text = (cell.textContent || '').trim().replace(/\"/g, '\"\"');\n                                // Wrap in quotes to handle commas\n                                rowData.push(`\"${text}\"`);\n                            });\n                            csvContent.push(rowData.join(','));\n                        });\n                        // Create CSV content\n                        const csvData = csvContent.join('\\\\n');\n                        // Create download link\n                        const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n                        const link = document.createElement('a');\n                        // Set up download\n                        if ('msSaveBlob' in navigator) { // For IE\n                            navigator.msSaveBlob(blob, filename);\n                        }\n                        else {\n                            // For other browsers\n                            link.href = URL.createObjectURL(blob);\n                            link.setAttribute('download', filename);\n                            link.style.visibility = 'hidden';\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                        }\n                    }\n                    // Function to clear all filters and reset sorting\n                    function clearAllFilters() {\n                        // Reset sort indicators\n                        const headers = document.querySelectorAll('th.sortable');\n                        headers.forEach(header => {\n                            const indicator = header.querySelector('.sort-indicator');\n                            if (indicator) {\n                                indicator.textContent = '';\n                            }\n                            header.removeAttribute('data-sort-direction');\n                        });\n                        // Reset to default sort\n                        const nameHeader = document.querySelector('th[data-sort=\"name\"]');\n                        if (nameHeader) {\n                            const indicator = nameHeader.querySelector('.sort-indicator');\n                            if (indicator) {\n                                indicator.textContent = '▼';\n                            }\n                            nameHeader.setAttribute('data-sort-direction', 'desc');\n                        }\n                        // Sort table by name column\n                        currentSortColumn = \"name\";\n                        currentSortDirection = \"desc\";\n                        sortTable('columnsTableBody', 0, 'name');\n                        // Clear any filters in dictionary view\n                        const filterInput = document.getElementById('dictionaryFilter');\n                        if (filterInput) {\n                            filterInput.value = '';\n                            // Trigger filter reset\n                            const filterEvent = new Event('input', { bubbles: true });\n                            filterInput.dispatchEvent(filterEvent);\n                        }\n                    }\n                    // Function to filter dictionary table\n                    function filterDictionary() {\n                        const input = document.getElementById('dictionaryFilter');\n                        if (!input)\n                            return;\n                        const filter = input.value.toUpperCase();\n                        const table = document.getElementById('dictionaryTable');\n                        if (!table)\n                            return;\n                        const rows = table.getElementsByTagName('tr');\n                        let hasResults = false;\n                        // Loop through all rows and hide those that don't match the filter\n                        for (let i = 1; i < rows.length; i++) { // Start at 1 to skip header row\n                            let rowText = '';\n                            const cells = rows[i].getElementsByTagName('td');\n                            // Concatenate all cell text for searching\n                            for (let j = 0; j < cells.length; j++) {\n                                rowText += cells[j].textContent || cells[j].innerText || '';\n                            }\n                            if (rowText.toUpperCase().indexOf(filter) > -1) {\n                                rows[i].style.display = '';\n                                hasResults = true;\n                            }\n                            else {\n                                rows[i].style.display = 'none';\n                            }\n                        }\n                        // Show/hide \"no results\" message\n                        const noResults = document.getElementById('noFilterResults');\n                        if (noResults) {\n                            noResults.style.display = hasResults ? 'none' : 'block';\n                        }\n                    }\n                    // Function to view the data dictionary\n                    function ViewDictionary() {\n                        // Get the modal's body element\n                        const modalBody = document.getElementById('viewDictionaryModalBody');\n                        if (!modalBody || !viewDictionaryModal)\n                            return;\n                        // Create the filter input\n                        const filterHtml = `\r\n                        <div class=\"filter-container\">\r\n                            <input type=\"text\" id=\"dictionaryFilter\" placeholder=\"Filter Dictionary\">\r\n                            <button id=\"clearFilter\">Clear</button>\r\n                        </div>\r\n                    `;\n                        // Create the table for displaying the dictionary\n                        let tableHtml = `\r\n                        <div id=\"noFilterResults\" style=\"display: none; text-align: center; padding: 20px; color: #666;\">\r\n                            No matching columns found\r\n                        </div>\r\n                        <div class=\"table-responsive\">\r\n                            <table class=\"table table-striped\" id=\"dictionaryTable\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th class=\"sortable\" data-sort=\"name\">Column Name <span class=\"sort-indicator\">▼</span></th>\r\n                                        <th class=\"sortable\" data-sort=\"type\">Data Type <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"logical\">Logical Column Name <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"description\">Description <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"example\">Example <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"redacted\">Redacted <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"tokenized\">Tokenized <span class=\"sort-indicator\"></span></th>\r\n                                        <th class=\"sortable\" data-sort=\"filter\">Filter <span class=\"sort-indicator\"></span></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                    `;\n                        // Add rows for each column in the dataset\n                        if (DataSet.DataSetColumns && Array.isArray(DataSet.DataSetColumns)) {\n                            DataSet.DataSetColumns.forEach((column) => {\n                                tableHtml += `\r\n                                <tr>\r\n                                    <td>${column.ColumnName || ''}</td>\r\n                                    <td class=\"datatype-column\">${column.ColumnType || ''}</td>\r\n                                    <td>${column.LogicalColumnName || ''}</td>\r\n                                    <td>${column.BusinessDescription || 'N/A'}</td>\r\n                                    <td>${column.ExampleValue || 'N/A'}</td>\r\n                                    <td>${column.Redact ? 'Yes' : 'No'}</td>\r\n                                    <td>${column.Tokenise ? 'Yes' : 'No'}</td>\r\n                                    <td>${column.IsFilter ? 'Yes' : 'No'}</td>\r\n                                </tr>\r\n                            `;\n                            });\n                        }\n                        // Close the table\n                        tableHtml += `\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div style=\"text-align: right; margin-top: 20px;\">\r\n                            <button id=\"exportDictionaryBtn\" class=\"btn btn-export\">\r\n                                <i class=\"icon-download\"></i> Export to CSV\r\n                            </button>\r\n                        </div>\r\n                    `;\n                        // Set the content and display the modal\n                        modalBody.innerHTML = filterHtml + tableHtml;\n                        viewDictionaryModal.style.display = 'block';\n                        // Initialize modal functionality after dictionary view is opened\n                        const dictionaryFilter = document.getElementById('dictionaryFilter');\n                        const clearFilterBtn = document.getElementById('clearFilter');\n                        const exportDictionaryBtn = document.getElementById('exportDictionaryBtn');\n                        const sortableHeaders = document.querySelectorAll('#dictionaryTable th.sortable');\n                        // Add event listeners for the dictionary modal\n                        if (dictionaryFilter) {\n                            dictionaryFilter.addEventListener('input', filterDictionary);\n                            dictionaryFilter.focus(); // Auto-focus the filter input\n                        }\n                        if (clearFilterBtn) {\n                            clearFilterBtn.addEventListener('click', function () {\n                                const dictionaryFilter = document.getElementById('dictionaryFilter');\n                                if (dictionaryFilter) {\n                                    dictionaryFilter.value = '';\n                                    dictionaryFilter.focus();\n                                    filterDictionary();\n                                }\n                            });\n                        }\n                        if (exportDictionaryBtn) {\n                            exportDictionaryBtn.addEventListener('click', function () {\n                                const date = new Date().toISOString().slice(0, 10);\n                                exportTableToCSV('dictionaryTable', `DataDictionary_${DataSet.DataSetID}_${date}.csv`);\n                            });\n                        }\n                        // Add sorting functionality to the dictionary table\n                        sortableHeaders.forEach((header, index) => {\n                            header.addEventListener('click', function () {\n                                const sortType = this.getAttribute('data-sort');\n                                if (sortType) {\n                                    sortTable('dictionaryTable', index, sortType);\n                                }\n                            });\n                        });\n                    }\n                    // Function to create a dataset request\n                    function CreateRequest() {\n                        // Get the modal's body element\n                        const modalBody = document.getElementById('requestDatasetModalBody');\n                        if (!modalBody || !requestDatasetModal)\n                            return;\n                        // Create the form for the request\n                        const formHtml = `\r\n                        <div class=\"col-md-12\">\r\n                            <form id=\"requestForm\">\r\n                                <!-- Request Name Field -->\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"RequestName\" class=\"control-label\">Request Name</label>\r\n                                    <input id=\"RequestName\" class=\"form-control\" placeholder=\"Name for this request\" required>\r\n                                </div>\r\n\r\n                                <!-- Assist Project Field -->\r\n                                <div class=\"form-group\" >\r\n                                    <label for=\"ProjectID\" class=\"control-label\">Assist Project</label>\r\n                                    <select id=\"ProjectID\" class=\"form-select\" required>\r\n                                        <option value=\"\">Select a Project</option>\r\n                                        <option value=\"82\">Project 1</option>\r\n                                        <option value=\"84\">Project 2</option>\r\n                                        <option value=\"85\">Project 3</option>\r\n                                        <option value=\"86\">Project 4</option>\r\n                                    </select>\r\n                                    <div class=\"validation-message\"></div>\r\n                                </div>\r\n                                \r\n                                <!-- Scheduled Refresh Field -->\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"ScheduleRefresh\" class=\"control-label\">Scheduled Refresh</label>\r\n                                    <select id=\"ScheduleRefresh\" class=\"form-select\">\r\n                                        <option value=\"No Refresh\">No Refresh</option>\r\n                                        <option value=\"Daily\">Daily</option>\r\n                                        <option value=\"Weekly\">Weekly</option>\r\n                                        <option value=\"Monthly\">Monthly</option>\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <!-- Action Buttons -->\r\n                                <div class=\"form-group\">\r\n                                    <button type=\"submit\" class=\"btn btn-accent\">Save</button>\r\n                                    <button type=\"button\" class=\"btn btn-default\" id=\"cancelRequest\">Cancel</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        <div style=\"text-align: right; margin-top: 20px;\">\r\n                            <button id=\"exportRequestBtn\" class=\"btn btn-export\">\r\n                                <i class=\"icon-download\"></i> Export to CSV\r\n                            </button>\r\n                        </div>\r\n                    `;\n                        // Set the content and display the modal\n                        modalBody.innerHTML = formHtml;\n                        requestDatasetModal.style.display = 'block';\n                        // Add event listener for the form submission\n                        const requestForm = document.getElementById('requestForm');\n                        if (requestForm) {\n                            requestForm.addEventListener('submit', function (e) {\n                                e.preventDefault();\n                                alert('Request submitted successfully!');\n                                if (requestDatasetModal) {\n                                    requestDatasetModal.style.display = 'none';\n                                }\n                            });\n                        }\n                        // Add event listener for the cancel button\n                        const cancelButton = document.getElementById('cancelRequest');\n                        if (cancelButton) {\n                            cancelButton.addEventListener('click', function () {\n                                if (requestDatasetModal) {\n                                    requestDatasetModal.style.display = 'none';\n                                }\n                            });\n                        }\n                        // Add event listener for the export button\n                        const exportRequestBtn = document.getElementById('exportRequestBtn');\n                        if (exportRequestBtn) {\n                            exportRequestBtn.addEventListener('click', function () {\n                                const date = new Date().toISOString().slice(0, 10);\n                                const csvContent = `\"Request Name\",\"Project\",\"Scheduled Refresh\"\\n\"Request for ${DataSet.Name}\",\"Project 1\",\"Weekly\"`;\n                                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n                                const link = document.createElement('a');\n                                link.href = URL.createObjectURL(blob);\n                                link.setAttribute('download', `DatasetRequest_${DataSet.DataSetID}_${date}.csv`);\n                                link.style.visibility = 'hidden';\n                                document.body.appendChild(link);\n                                link.click();\n                                document.body.removeChild(link);\n                            });\n                        }\n                    }\n                    // Add event listeners\n                    if (viewDictionaryBtn) {\n                        viewDictionaryBtn.addEventListener('click', ViewDictionary);\n                    }\n                    if (requestDatasetBtn) {\n                        requestDatasetBtn.addEventListener('click', CreateRequest);\n                    }\n                    if (helpBtn) {\n                        helpBtn.addEventListener('click', function () {\n                            if (helpModal) {\n                                helpModal.style.display = 'block';\n                            }\n                        });\n                    }\n                    if (exportBtn) {\n                        exportBtn.addEventListener('click', function () {\n                            const date = new Date().toISOString().slice(0, 10);\n                            exportTableToCSV('columnsTableBody', `Dataset_${DataSet.DataSetID}_${date}.csv`);\n                        });\n                    }\n                    if (clearAllFiltersBtn) {\n                        clearAllFiltersBtn.addEventListener('click', clearAllFilters);\n                    }\n                    // Add sorting to the main table\n                    const mainTableHeaders = document.querySelectorAll('.columns-table th.sortable');\n                    mainTableHeaders.forEach((header, index) => {\n                        header.addEventListener('click', function () {\n                            const sortType = this.getAttribute('data-sort');\n                            if (sortType) {\n                                sortTable('columnsTableBody', index, sortType);\n                            }\n                        });\n                    });\n                    // When the user clicks on <span> (x), close the modal\n                    for (let i = 0; i < closeButtons.length; i++) {\n                        closeButtons[i].addEventListener('click', function () {\n                            if (viewDictionaryModal) {\n                                viewDictionaryModal.style.display = 'none';\n                            }\n                            if (requestDatasetModal) {\n                                requestDatasetModal.style.display = 'none';\n                            }\n                            if (helpModal) {\n                                helpModal.style.display = 'none';\n                            }\n                        });\n                    }\n                    // When the user clicks anywhere outside of the modal, close it\n                    window.addEventListener('click', function (event) {\n                        if (event.target === viewDictionaryModal && viewDictionaryModal) {\n                            viewDictionaryModal.style.display = 'none';\n                        }\n                        if (event.target === requestDatasetModal && requestDatasetModal) {\n                            requestDatasetModal.style.display = 'none';\n                        }\n                        if (event.target === helpModal && helpModal) {\n                            helpModal.style.display = 'none';\n                        }\n                    });\n                    // Initialize with default sort\n                    sortTable('columnsTableBody', 0, 'name');\n                }, 100); // Small delay to ensure DOM is ready\n            }\n            catch (ex) {\n                console.error(\"Error:\", ex);\n                const error = ex;\n                if (error && error.message) {\n                    this.errorCallback(\"Error\", \"Failed to build the dataset page\", error.message, this.element);\n                }\n            }\n        });\n        console.log(params);\n        this.loadResources();\n    }\n}\nconst definition = {\n    version: \"1.0.0\",\n    embedding: {\n        destroy: (element) => {\n            // Clear out the contents of the element\n            element.innerHTML = \"\";\n            // Grab the instance we saved earlier on the element\n            const embedInstance = element.instance;\n            if (embedInstance) {\n                // Call the dispose on the instance first\n                embedInstance.dispose();\n                // Then clean up the reference\n                delete element.instance;\n                console.log('Instance disposed.');\n            }\n        },\n        run: (element, entityUrl, paramValues, settings, errorCallback) => {\n            const instance = new CustomEmbed(element, entityUrl, paramValues, settings, errorCallback);\n            // Store for proper disposal later when the destroy is called\n            element.instance = instance;\n        }\n    }\n};\n\n\n//# sourceURL=webpack://@trustedresearchenvironment/webpack-ts-example/./index.ts?");

/***/ }),

/***/ "./library-base.ts":
/*!*************************!*\
  !*** ./library-base.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibraryBase: () => (/* binding */ LibraryBase)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass LibraryBase {\n    constructor(element, entityUrl, paramValues, settings, errorCallback) {\n        this.loadResourceFiles = () => __awaiter(this, void 0, void 0, function* () {\n        });\n        this.setupEventListeners = () => {\n        };\n        this.dispose = () => {\n        };\n        this.element = element;\n        this.entityUrl = entityUrl;\n        this.paramValues = paramValues;\n        this.settings = settings;\n        this.errorCallback = errorCallback;\n        const embedTypeSetting = this.getSettingValue('embedType');\n        const embedIdSetting = this.getSettingValue('embedId');\n        this.embedType = +(embedTypeSetting === null || embedTypeSetting === void 0 ? void 0 : embedTypeSetting.value);\n        this.embedId = +(embedIdSetting === null || embedIdSetting === void 0 ? void 0 : embedIdSetting.value);\n        this.setupEventListeners();\n    }\n    getSettingValue(name) {\n        var matches = this.settings.filter(x => x.name == name);\n        if (matches.length > 0) {\n            return matches[0];\n        }\n        else {\n            return undefined;\n        }\n    }\n    ;\n    getParamValue(id) {\n        var matches = this.paramValues.filter(x => x.id == id);\n        if (matches.length > 0) {\n            return matches[0];\n        }\n        else {\n            return undefined;\n        }\n    }\n    ;\n    getQueryStringParameter(url, key) {\n        var parts = url.split(\"?\");\n        if (parts.length === 1)\n            return undefined;\n        var paramKeys = parts[1].split(\"&\").map(x => {\n            var keyValuePair = x.split(\"=\");\n            return {\n                key: keyValuePair[0],\n                value: keyValuePair[1]\n            };\n        });\n        var match = paramKeys.find(x => x.key.toLocaleUpperCase() === key.toLocaleUpperCase());\n        return match === undefined ? undefined : match.value;\n    }\n}\n\n\n//# sourceURL=webpack://@trustedresearchenvironment/webpack-ts-example/./library-base.ts?");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ var __webpack_exports__definition = __webpack_exports__.definition;
/******/ export { __webpack_exports__definition as definition };
/******/ 
