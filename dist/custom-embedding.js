/*! Build Date: 2025-09-22T04:17:03.266Z */
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   definition: () => (/* binding */ definition)\n/* harmony export */ });\n/* harmony import */ var _library_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./library-base */ \"./library-base.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass CustomEmbed extends _library_base__WEBPACK_IMPORTED_MODULE_0__.LibraryBase {\n    constructor(element, entityUrl, params, settings, errorCallback) {\n        super(element, entityUrl, params, settings, errorCallback);\n        this.token = \"\";\n        this.allColumns = [];\n        this.currentSortColumn = \"name\";\n        this.currentSortDirection = \"asc\";\n        this.currentPage = 1;\n        this.rowsPerPage = 2;\n        this.dataSet = null;\n        this.initialize = () => __awaiter(this, void 0, void 0, function* () {\n            // await this.getAccessToken();\n            yield this.buildPage();\n        });\n        this.getAccessToken = () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            try {\n                const authId = (_a = this.getParamValue('ApiAuthRequestId')) === null || _a === void 0 ? void 0 : _a.value;\n                const authResponse = yield window.loomeApi.runApiRequest(authId);\n                this.token = authResponse.access_token;\n            }\n            catch (ex) {\n                console.log(ex);\n                const error = ex;\n                this.errorCallback(\"Error\", \"Unable obtain access token\", error.message, this.element);\n            }\n        });\n        this.buildPage = () => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            try {\n                // Initialize any resources if needed\n                this.dataSet = yield window.loomeApi.runApiRequest(6, {\n                    DataSetID: ((_a = this.getParamValue('DataSetID')) === null || _a === void 0 ? void 0 : _a.value) || '',\n                });\n                const columnsResponse = yield window.loomeApi.runApiRequest(7, {\n                    DataSetID: ((_b = this.getParamValue('DataSetID')) === null || _b === void 0 ? void 0 : _b.value) || '',\n                });\n                this.allColumns = columnsResponse.Results ?\n                    columnsResponse.Results.sort((a, b) => a.DisplayOrder - b.DisplayOrder) :\n                    [];\n                // --- 1. Generate the main HTML structure ---\n                if (!this.dataSet) {\n                    throw new Error('Dataset information not available');\n                }\n                const datasetHtml = this.generateMainLayout(this.dataSet); // <- Fix here\n                const styles = this.generateStyles();\n                this.element.innerHTML = styles + datasetHtml;\n                // --- 2. Set up event listeners and initial state ---\n                this.setupEventListeners();\n                this.updateTable();\n            }\n            catch (ex) {\n                console.error(\"Error:\", ex);\n                const error = ex;\n                if (error && error.message) {\n                    this.errorCallback(\"Error\", \"Failed to build the dataset page\", error.message, this.element);\n                }\n            }\n        });\n        this.setupEventListeners = () => {\n            try {\n                // Sort headers\n                const headers = document.querySelectorAll('#dataTable th[data-sort]');\n                headers.forEach(header => {\n                    header.addEventListener('click', () => {\n                        const sortType = header.getAttribute('data-sort');\n                        if (sortType) {\n                            if (this.currentSortColumn === sortType) {\n                                this.currentSortDirection = this.currentSortDirection === 'asc' ? 'desc' : 'asc';\n                            }\n                            else {\n                                this.currentSortColumn = sortType;\n                                this.currentSortDirection = 'asc';\n                            }\n                            this.currentPage = 1;\n                            this.updateTable();\n                        }\n                    });\n                });\n                // Page size selector\n                const pageSize = document.getElementById('pageSize');\n                if (pageSize) {\n                    pageSize.addEventListener('change', (e) => {\n                        const newSize = parseInt(e.target.value);\n                        if (!isNaN(newSize)) {\n                            this.rowsPerPage = newSize;\n                            this.currentPage = 1;\n                            this.updateTable();\n                        }\n                    });\n                }\n                // Navigation buttons\n                const prevBtn = document.querySelector('.prev-page');\n                const nextBtn = document.querySelector('.next-page');\n                if (prevBtn) {\n                    prevBtn.addEventListener('click', () => {\n                        if (this.currentPage > 1) {\n                            this.currentPage--;\n                            this.updateTable();\n                        }\n                    });\n                }\n                if (nextBtn) {\n                    nextBtn.addEventListener('click', () => {\n                        const totalPages = Math.ceil(this.allColumns.length / this.rowsPerPage);\n                        if (this.currentPage < totalPages) {\n                            this.currentPage++;\n                            this.updateTable();\n                        }\n                    });\n                }\n                // Request Dataset button\n                const requestBtn = document.getElementById('requestDatasetBtn');\n                if (requestBtn) {\n                    requestBtn.addEventListener('click', () => __awaiter(this, void 0, void 0, function* () {\n                        console.log('Button clicked, attempting to fetch projects...');\n                        requestBtn.disabled = true;\n                        try {\n                            console.log('Before API call');\n                            yield this.createRequestModal();\n                            console.log('After API call');\n                        }\n                        catch (error) {\n                            console.error('Error in button click handler:', error);\n                        }\n                        finally {\n                            requestBtn.disabled = false;\n                        }\n                    }));\n                }\n            }\n            catch (error) {\n                console.error('Error setting up event listeners:', error);\n            }\n        };\n        this.updateTable = () => {\n            const tbody = document.getElementById('columnsTableBody');\n            if (!tbody)\n                return;\n            const startIndex = (this.currentPage - 1) * this.rowsPerPage;\n            const endIndex = startIndex + this.rowsPerPage;\n            const paginatedColumns = this.allColumns.slice(startIndex, endIndex);\n            let columnsHtml = '';\n            paginatedColumns.forEach((column) => {\n                columnsHtml += `\r\n                <tr>\r\n                    <td>${column.ColumnName || ''}</td>\r\n                    <td><span class=\"mui-chip\">${column.ColumnType || ''}</span></td>\r\n                    <td>${column.LogicalColumnName || ''}</td>\r\n                    <td>${column.BusinessDescription || 'N/A'}</td>\r\n                    <td><span class=\"code-cell\">${column.ExampleValue || 'N/A'}</span></td>\r\n                    <td>${column.Redact ? '<span class=\"mui-chip success\">Yes</span>' : '<span class=\"mui-chip\">No</span>'}</td>\r\n                    <td>${column.Tokenise ? '<span class=\"mui-chip success\">Yes</span>' : '<span class=\"mui-chip\">No</span>'}</td>\r\n                </tr>\r\n            `;\n            });\n            tbody.innerHTML = columnsHtml;\n            try {\n                this.updateSortIcons();\n                // Update page size display\n                const pageSizeSelect = document.getElementById('pageSize');\n                if (pageSizeSelect) {\n                    pageSizeSelect.value = this.rowsPerPage.toString();\n                }\n                // Update pagination info in table footer\n                const paginationInfo = document.querySelector('.pagination-info');\n                if (paginationInfo) {\n                    const startIndex = (this.currentPage - 1) * this.rowsPerPage + 1;\n                    const endIndex = Math.min(startIndex + this.rowsPerPage - 1, this.allColumns.length);\n                    paginationInfo.innerHTML = `\r\n                    Showing ${startIndex} to ${endIndex} of ${this.allColumns.length} entries\r\n                `;\n                }\n            }\n            catch (error) {\n                console.error('Error updating table UI:', error);\n            }\n        };\n        this.updateSortIcons = () => {\n            document.querySelectorAll('.table th.sortable i').forEach(icon => {\n                icon.classList.remove('bi-sort-up', 'bi-sort-down');\n                icon.classList.add('bi-sort');\n            });\n            const sortedHeader = document.querySelector(`.table th[data-sort=\"${this.currentSortColumn}\"] i`);\n            if (sortedHeader) {\n                sortedHeader.classList.remove('bi-sort');\n                sortedHeader.classList.add(this.currentSortDirection === 'asc' ? 'bi-sort-up' : 'bi-sort-down');\n            }\n        };\n        this.updatePaginationButtons = () => {\n            const totalPages = Math.ceil(this.allColumns.length / this.rowsPerPage);\n            // Update navigation buttons\n            const prevPageBtn = document.querySelector('.prev-page');\n            const nextPageBtn = document.querySelector('.next-page');\n            if (prevPageBtn) {\n                prevPageBtn.classList.toggle('disabled', this.currentPage === 1);\n            }\n            if (nextPageBtn) {\n                nextPageBtn.classList.toggle('disabled', this.currentPage >= totalPages);\n            }\n        };\n        this.createRequestModal = () => __awaiter(this, void 0, void 0, function* () {\n            const modal = document.getElementById('requestDatasetModal');\n            if (!modal)\n                return;\n            try {\n                console.log('Fetching projects...');\n                // Fetch projects before showing modal\n                const projectsResponse = yield window.loomeApi.runApiRequest(9, {});\n                // Debug logging\n                console.log('Raw API Response:', projectsResponse);\n                console.log('Response type:', typeof projectsResponse);\n                console.log('Has Results property:', (projectsResponse === null || projectsResponse === void 0 ? void 0 : projectsResponse.Results) !== undefined);\n                // Check if response is a string (might need parsing)\n                // if (typeof projectsResponse === 'string') {\n                //     try {\n                //         const parsedResponse = JSON.parse(projectsResponse);\n                //         if (parsedResponse.Results) {\n                //             projectsResponse = parsedResponse;\n                //         }\n                //     } catch (parseError) {\n                //         console.error('Failed to parse response:', parseError);\n                //     }\n                // }\n                // Validate response structure\n                if (!projectsResponse || !Array.isArray(projectsResponse.Results)) {\n                    console.error('Invalid response structure:', projectsResponse);\n                    throw new Error(`Invalid API response structure. Expected Results array, got: ${typeof (projectsResponse === null || projectsResponse === void 0 ? void 0 : projectsResponse.Results)}`);\n                }\n                // Get the project select element\n                const projectSelect = document.getElementById('ProjectID');\n                if (!projectSelect) {\n                    throw new Error('Project select element not found');\n                }\n                // Clear existing options except the first one\n                const defaultOption = projectSelect.options[0];\n                projectSelect.innerHTML = '';\n                projectSelect.appendChild(defaultOption);\n                // Add new options from API response\n                projectsResponse.Results.forEach((project) => {\n                    if (project.IsActive) {\n                        const option = document.createElement('option');\n                        option.value = project.AssistProjectID.toString();\n                        option.textContent = project.Name;\n                        option.title = project.Description || '';\n                        projectSelect.appendChild(option);\n                    }\n                });\n                // Show modal\n                modal.classList.add('show');\n                // Setup close handlers\n                const closeModal = () => {\n                    modal.classList.remove('show');\n                };\n                // Close on X button or cancel\n                const closeButtons = modal.querySelectorAll('.modal-close');\n                closeButtons.forEach(button => {\n                    button.addEventListener('click', closeModal);\n                });\n                // Close on outside click\n                modal.addEventListener('click', (e) => {\n                    if (e.target === modal) {\n                        closeModal();\n                    }\n                });\n                // Handle form submission\n                const form = document.getElementById('requestForm');\n                if (form) {\n                    form.addEventListener('submit', (e) => __awaiter(this, void 0, void 0, function* () {\n                        var _a, _b, _c;\n                        e.preventDefault();\n                        try {\n                            if (!this.dataSet) {\n                                throw new Error('Dataset information not available');\n                            }\n                            const formData = {\n                                requestName: (_a = document.getElementById('RequestName')) === null || _a === void 0 ? void 0 : _a.value,\n                                projectId: (_b = document.getElementById('ProjectID')) === null || _b === void 0 ? void 0 : _b.value,\n                                datasetId: this.dataSet.DataSetID,\n                                approvers: 'hardcoded miguel as approver',\n                                description: (_c = document.getElementById('RequestDescription')) === null || _c === void 0 ? void 0 : _c.value\n                            };\n                            // Call the API with the required parameters\n                            const response = yield window.loomeApi.runApiRequest(17, {\n                                DataSetID: formData.datasetId,\n                                approvers: formData.approvers,\n                                assistProjectID: parseInt(formData.projectId),\n                                description: formData.description,\n                                requestName: formData.requestName,\n                                upn: 'miguel@testupn.com'\n                            });\n                            console.log('API Response:', response);\n                            // Show success message\n                            alert('Request submitted successfully!');\n                            closeModal();\n                        }\n                        catch (error) {\n                            console.error('Error submitting request:', error);\n                            alert('Failed to submit request. Please try again.');\n                        }\n                    }));\n                }\n            }\n            catch (error) {\n                console.error('Error in createRequestModal:', error);\n                console.error('Full error details:', {\n                    name: error instanceof Error ? error.name : 'Unknown',\n                    message: error instanceof Error ? error.message : 'Unknown error',\n                    stack: error instanceof Error ? error.stack : undefined\n                });\n                if (error instanceof Error) {\n                    this.errorCallback(\"Error\", \"Failed to load projects\", `Error details: ${error.message}`, this.element);\n                }\n            }\n        });\n        this.initialize();\n    }\n    generateMainLayout(dataSet) {\n        return `\r\n            <div id=\"datasetRoot\">\r\n                <!-- Modal -->\r\n                <div id=\"requestDatasetModal\" class=\"modal\">\r\n                    <div class=\"modal-content\">\r\n                        <div class=\"modal-header\">\r\n                            <h3>Request Dataset</h3>\r\n                            <span class=\"modal-close\">&times;</span>\r\n                        </div>\r\n                        <div class=\"modal-body\">\r\n                            <form id=\"requestForm\" class=\"request-form\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"RequestName\">Request Name</label>\r\n                                    <input id=\"RequestName\" class=\"form-input\" placeholder=\"Name for this request\" required>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"RequestDescription\">Description</label>\r\n                                    <input id=\"RequestName\" class=\"form-input\" placeholder=\"Description for this request\" required>\r\n                                </div>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"ProjectID\">Assist Project</label>\r\n                                    <select id=\"ProjectID\" class=\"form-select\" required>\r\n                                        <option value=\"\">Select a Project</option>\r\n                                        <option value=\"82\">Project 1</option>\r\n                                        <option value=\"84\">Project 2</option>\r\n                                        <option value=\"85\">Project 3</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div class=\"form-actions\">\r\n                                    <button type=\"submit\" class=\"button button-primary\">Submit Request</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"mui-card\">\r\n                    <div class=\"card-header\">\r\n                        <div class=\"header-content\">\r\n                            <h2>${dataSet.Name}</h2>\r\n                            <button id=\"requestDatasetBtn\">\r\n                                <span class=\"material-icons\">data_exploration</span>\r\n                                Request Dataset\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"metadata\">\r\n                            <div class=\"chips\">\r\n                                <span class=\"mui-chip\">ID: ${dataSet.DataSetID}</span>\r\n                                <span class=\"mui-chip\">Owner: ${dataSet.Owner}</span>\r\n                                <span class=\"mui-chip\">Modified: ${new Date(dataSet.ModifiedDate).toLocaleDateString()}</span>\r\n                            </div>\r\n                            <p>${dataSet.Description}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"mui-card table-card\">\r\n                    <div class=\"table-container\">\r\n                        <table id=\"dataTable\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th data-sort=\"ColumnName\">Column Name</th>\r\n                                    <th data-sort=\"ColumnType\">Data Type</th>\r\n                                    <th data-sort=\"LogicalColumnName\">Logical Name</th>\r\n                                    <th data-sort=\"BusinessDescription\">Description</th>\r\n                                    <th data-sort=\"ExampleValue\">Example</th>\r\n                                    <th data-sort=\"Redact\">Redacted</th>\r\n                                    <th data-sort=\"Tokenise\">Tokenized</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody id=\"columnsTableBody\"></tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div class=\"table-pagination\">\r\n                        <div class=\"pagination-controls\">\r\n                            <div class=\"pagination-info\"></div>\r\n                            <div class=\"pagination-actions\">\r\n                                <select id=\"pageSize\" class=\"rows-select\">\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"10\">10</option>\r\n                                    <option value=\"25\">25</option>\r\n                                    <option value=\"50\">50</option>\r\n                                </select>\r\n                                <button class=\"prev-page\">Previous</button>\r\n                                <button class=\"next-page\">Next</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\n    }\n    generateStyles() {\n        // Add Material Icons font\n        if (!document.querySelector('#material-icons-font')) {\n            const link = document.createElement('link');\n            link.id = 'material-icons-font';\n            link.rel = 'stylesheet';\n            link.href = 'https://fonts.googleapis.com/icon?family=Material+Icons';\n            document.head.appendChild(link);\n        }\n        return `\r\n            <style>\r\n                #datasetRoot {\r\n                    padding: 24px;\r\n                    font-family: \"Roboto\", \"Helvetica\", \"Arial\";\r\n                }\r\n                .mui-card {\r\n                    background: #fff;\r\n                    border-radius: 4px;\r\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n                    margin-bottom: 24px;\r\n                }\r\n                .card-header {\r\n                    padding: 16px 24px;\r\n                }\r\n                .header-content {\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                }\r\n                .header-content h2 {\r\n                    font-weight: 700;\r\n                    font-size: 1.5rem;\r\n                    margin: 0;\r\n                    color: #2c3e50;\r\n                }\r\n                .metadata {\r\n                    margin-top: 16px;\r\n                }\r\n                .chips {\r\n                    display: flex;\r\n                    gap: 8px;\r\n                    margin-bottom: 8px;\r\n                }\r\n                .mui-chip {\r\n                    background: #e0e0e0;\r\n                    padding: 4px 12px;\r\n                    border-radius: 16px;\r\n                    font-size: 0.875rem;\r\n                }\r\n                .table-container {\r\n                    overflow-x: auto;\r\n                }\r\n                #dataTable {\r\n                    width: 100%;\r\n                    border-collapse: collapse;\r\n                }\r\n                #dataTable th {\r\n                    background: #f5f5f5;\r\n                    padding: 16px;\r\n                    text-align: left;\r\n                    font-weight: 700;\r\n                    cursor: pointer;\r\n                    color: #2c3e50;\r\n                    font-size: 0.95rem;\r\n                }\r\n                #dataTable td {\r\n                    padding: 16px;\r\n                    border-bottom: 1px solid #e0e0e0;\r\n                }\r\n                .table-pagination {\r\n                    padding: 16px;\r\n                    display: flex;\r\n                    justify-content: flex-end;\r\n                    align-items: center;\r\n                }\r\n                #requestDatasetBtn {\r\n                    padding: 8px 16px;\r\n                    background: #4EC4BC;\r\n                    color: white;\r\n                    border: none;\r\n                    border-radius: 4px;\r\n                    cursor: pointer;\r\n                    display: flex;\r\n                    align-items: center;\r\n                    gap: 8px;\r\n                    box-shadow: 0 4px 4px rgba(0,0,0,0.1);\r\n                    font-size: 15px;\r\n                }\r\n                #requestDatasetBtn .material-icons {\r\n                    font-size: 20px;\r\n                }\r\n                #requestDatasetBtn:hover {\r\n                    filter: brightness(0.9);\r\n                    transform: scale(1.05);\r\n                    transition: transform 0.2s;\r\n                }\r\n                .pagination-controls {\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                    padding: 16px;\r\n                }\r\n                .pagination-actions {\r\n                    display: flex;\r\n                    gap: 8px;\r\n                    align-items: center;\r\n                }\r\n                .rows-select {\r\n                    padding: 4px 8px;\r\n                    border-radius: 4px;\r\n                    border: 1px solid #e0e0e0;\r\n                    margin-right: 16px;\r\n                }\r\n                .prev-page, .next-page {\r\n                    padding: 4px 12px;\r\n                    border: 1px solid #e0e0e0;\r\n                    background: white;\r\n                    border-radius: 4px;\r\n                    cursor: pointer;\r\n                }\r\n                .prev-page:hover, .next-page:hover {\r\n                    background: #f5f5f5;\r\n                }\r\n                .prev-page.disabled, .next-page.disabled {\r\n                    opacity: 0.5;\r\n                    cursor: not-allowed;\r\n                }\r\n                .code-cell {\r\n                    font-family: monospace;\r\n                    background: #f5f5f5;\r\n                    padding: 2px 6px;\r\n                    border-radius: 4px;\r\n                }\r\n\r\n                /* Modal styles */\r\n                .modal {\r\n                    display: none;\r\n                    position: fixed;\r\n                    top: 0;\r\n                    left: 0;\r\n                    width: 100%;\r\n                    height: 100%;\r\n                    background: rgba(0,0,0,0.5);\r\n                    z-index: 1000;\r\n                    opacity: 0;\r\n                    transition: opacity 0.3s ease;\r\n                }\r\n                \r\n                .modal.show {\r\n                    display: flex;\r\n                    opacity: 1;\r\n                    align-items: center;\r\n                    justify-content: center;\r\n                }\r\n\r\n                .modal-content {\r\n                    background: white;\r\n                    border-radius: 8px;\r\n                    width: 90%;\r\n                    max-width: 500px;\r\n                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n                    transform: translateY(-20px);\r\n                    transition: transform 0.3s ease;\r\n                }\r\n\r\n                .modal.show .modal-content {\r\n                    transform: translateY(0);\r\n                }\r\n\r\n                .modal-header {\r\n                    padding: 20px 24px;\r\n                    border-bottom: 1px solid #e0e0e0;\r\n                    display: flex;\r\n                    justify-content: space-between;\r\n                    align-items: center;\r\n                }\r\n\r\n                .modal-header h3 {\r\n                    margin: 0;\r\n                    font-size: 1.25rem;\r\n                    color: #2c3e50;\r\n                    font-weight: 600;\r\n                }\r\n\r\n                .modal-close {\r\n                    font-size: 1.5rem;\r\n                    color: #666;\r\n                    cursor: pointer;\r\n                    padding: 4px;\r\n                    line-height: 1;\r\n                }\r\n\r\n                .modal-close:hover {\r\n                    color: #333;\r\n                }\r\n\r\n                .modal-body {\r\n                    padding: 24px;\r\n                }\r\n\r\n                .request-form {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    gap: 20px;\r\n                }\r\n\r\n                .form-group {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    gap: 8px;\r\n                }\r\n\r\n                .form-group label {\r\n                    font-weight: 500;\r\n                    color: #2c3e50;\r\n                }\r\n\r\n                .form-input, .form-select {\r\n                    padding: 8px 12px;\r\n                    border: 1px solid #e0e0e0;\r\n                    border-radius: 4px;\r\n                    font-size: 1rem;\r\n                }\r\n\r\n                .form-input:focus, .form-select:focus {\r\n                    border-color: #4EC4BC;\r\n                    outline: none;\r\n                    box-shadow: 0 0 0 2px rgba(78,196,188,0.2);\r\n                }\r\n\r\n                .form-actions {\r\n                    display: flex;\r\n                    justify-content: flex-end;\r\n                    gap: 12px;\r\n                    margin-top: 12px;\r\n                }\r\n\r\n                .button {\r\n                    padding: 8px 16px;\r\n                    border-radius: 4px;\r\n                    font-weight: 500;\r\n                    cursor: pointer;\r\n                    border: none;\r\n                }\r\n\r\n                .button-primary {\r\n                    background: #4EC4BC;\r\n                    color: white;\r\n                }\r\n\r\n                .button-primary:hover {\r\n                    filter: brightness(0.9);\r\n                }\r\n\r\n                .button-secondary {\r\n                    background: #e0e0e0;\r\n                    color: #333;\r\n                }\r\n\r\n                .button-secondary:hover {\r\n                    background: #d0d0d0;\r\n                }\r\n            </style>\r\n        `;\n    }\n    loadResources() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Any additional resource loading can be added here\n            return Promise.resolve();\n        });\n    }\n}\nconst definition = {\n    version: \"1.0.0\",\n    embedding: {\n        destroy: (element) => {\n            element.innerHTML = \"\";\n            const embedInstance = element.instance;\n            if (embedInstance) {\n                embedInstance.dispose();\n                delete element.instance;\n                console.log('Instance disposed.');\n            }\n        },\n        run: (element, entityUrl, paramValues, settings, errorCallback) => {\n            const instance = new CustomEmbed(element, entityUrl, paramValues, settings, errorCallback);\n            element.instance = instance;\n        }\n    }\n};\n\n\n//# sourceURL=webpack://@trustedresearchenvironment/webpack-ts-example/./index.ts?");

/***/ }),

/***/ "./library-base.ts":
/*!*************************!*\
  !*** ./library-base.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibraryBase: () => (/* binding */ LibraryBase)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass LibraryBase {\n    constructor(element, entityUrl, paramValues, settings, errorCallback) {\n        this.loadResourceFiles = () => __awaiter(this, void 0, void 0, function* () {\n        });\n        this.setupEventListeners = () => {\n        };\n        this.dispose = () => {\n        };\n        this.element = element;\n        this.entityUrl = entityUrl;\n        this.paramValues = paramValues;\n        this.settings = settings;\n        this.errorCallback = errorCallback;\n        const embedTypeSetting = this.getSettingValue('embedType');\n        const embedIdSetting = this.getSettingValue('embedId');\n        this.embedType = +(embedTypeSetting === null || embedTypeSetting === void 0 ? void 0 : embedTypeSetting.value);\n        this.embedId = +(embedIdSetting === null || embedIdSetting === void 0 ? void 0 : embedIdSetting.value);\n        this.setupEventListeners();\n    }\n    getSettingValue(name) {\n        var matches = this.settings.filter(x => x.name == name);\n        if (matches.length > 0) {\n            return matches[0];\n        }\n        else {\n            return undefined;\n        }\n    }\n    ;\n    getParamValue(id) {\n        var matches = this.paramValues.filter(x => x.id == id);\n        if (matches.length > 0) {\n            return matches[0];\n        }\n        else {\n            return undefined;\n        }\n    }\n    ;\n    getQueryStringParameter(url, key) {\n        var parts = url.split(\"?\");\n        if (parts.length === 1)\n            return undefined;\n        var paramKeys = parts[1].split(\"&\").map(x => {\n            var keyValuePair = x.split(\"=\");\n            return {\n                key: keyValuePair[0],\n                value: keyValuePair[1]\n            };\n        });\n        var match = paramKeys.find(x => x.key.toLocaleUpperCase() === key.toLocaleUpperCase());\n        return match === undefined ? undefined : match.value;\n    }\n}\n\n\n//# sourceURL=webpack://@trustedresearchenvironment/webpack-ts-example/./library-base.ts?");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ var __webpack_exports__definition = __webpack_exports__.definition;
/******/ export { __webpack_exports__definition as definition };
/******/ 
