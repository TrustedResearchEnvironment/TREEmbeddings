/*! Build Date: 2025-09-11T03:21:56.683Z */
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   definition: () => (/* binding */ definition)\n/* harmony export */ });\n/* harmony import */ var _library_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./library-base */ \"./library-base.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass CustomEmbed extends _library_base__WEBPACK_IMPORTED_MODULE_0__.LibraryBase {\n    constructor(element, entityUrl, params, settings, errorCallback) {\n        super(element, entityUrl, params, settings, errorCallback);\n        this.token = \"\";\n        this.loadResources = () => __awaiter(this, void 0, void 0, function* () {\n            // await this.getAccessToken();\n            yield this.buildPage();\n        });\n        this.getAccessToken = () => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            try {\n                // A way to get the runtime param passed down from the portal\n                const authId = (_a = this.getParamValue('ApiAuthRequestId')) === null || _a === void 0 ? void 0 : _a.value;\n                const authResponse = yield window.loomeApi.runApiRequest(authId);\n                this.token = authResponse.access_token;\n            }\n            catch (ex) {\n                // Additional debug logs, won't hurt to get additional raw info\n                console.log(ex);\n                const error = ex;\n                this.errorCallback(\"Error\", \"Unable obtain access token\", error.message, this.element);\n            }\n        });\n        this.buildPage = () => __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            try {\n                yield this.loadBootstrap();\n                // Fetch the dataset metadata\n                const DataSet = yield window.loomeApi.runApiRequest(6, {\n                    DataSetID: ((_a = this.getParamValue('DataSetID')) === null || _a === void 0 ? void 0 : _a.value) || '',\n                });\n                // Fetch the dataset columns using API request 7\n                const columnsResponse = yield window.loomeApi.runApiRequest(7, {\n                    DataSetID: ((_b = this.getParamValue('DataSetID')) === null || _b === void 0 ? void 0 : _b.value) || '',\n                });\n                // Extract columns from the Results array and sort by DisplayOrder\n                const dataSetColumns = columnsResponse.Results ?\n                    columnsResponse.Results.sort((a, b) => a.DisplayOrder - b.DisplayOrder) :\n                    [];\n                // Now let's generate the HTML for the columns\n                let columnsHtml = '';\n                if (dataSetColumns && Array.isArray(dataSetColumns)) {\n                    dataSetColumns.forEach((column) => {\n                        columnsHtml += `\r\n                        <tr>\r\n                            <td>${column.ColumnName || ''}</td>\r\n                            <td><span class=\"badge bg-secondary\">${column.ColumnType || ''}</span></td>\r\n                            <td>${column.LogicalColumnName || ''}</td>\r\n                            <td>${column.BusinessDescription || 'N/A'}</td>\r\n                            <td><code>${column.ExampleValue || 'N/A'}</code></td>\r\n                            <td>${column.Redact ? '<span class=\"badge bg-success\">Yes</span>' : '<span class=\"badge bg-light text-dark\">No</span>'}</td>\r\n                            <td>${column.Tokenise ? '<span class=\"badge bg-success\">Yes</span>' : '<span class=\"badge bg-light text-dark\">No</span>'}</td>\r\n                            <td>${column.IsFilter ? '<span class=\"badge bg-success\">Yes</span>' : '<span class=\"badge bg-light text-dark\">No</span>'}</td>\r\n                        </tr>\r\n                    `;\n                    });\n                }\n                // --- 1. Generate the HTML structure ---\n                const datasetHtml = `\r\n                <div class=\"container-fluid mt-3\">\r\n                    <div class=\"card mb-3\">\r\n                        <div class=\"card-header bg-primary text-white\">\r\n                            <div class=\"d-flex justify-content-between align-items-center\">\r\n                                <h2 class=\"h4 my-1\">${DataSet.Name}</h2>\r\n                                <button id=\"requestDatasetBtn\" class=\"btn btn-light\">\r\n                                    <i class=\"bi bi-file-earmark-text\"></i> Request Dataset\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"card-body\">\r\n                            <div class=\"row mb-2\">\r\n                                <div class=\"col-md-4\">\r\n                                    <span class=\"badge bg-info text-dark\">ID: ${DataSet.DataSetID}</span>\r\n                                    <span class=\"badge bg-info text-dark\">Owner: ${DataSet.Owner}</span>\r\n                                    <span class=\"badge bg-info text-dark\">Modified: ${new Date(DataSet.ModifiedDate).toLocaleDateString()}</span>\r\n                                </div>\r\n                                <div class=\"col-md-8\">\r\n                                    <p class=\"mb-0\">${DataSet.Description}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Columns table -->\r\n                    <div class=\"card mb-3\">\r\n                        <div class=\"card-header\">\r\n                            <h4 class=\"mb-0\">Dataset Columns</h4>\r\n                        </div>\r\n                        <div class=\"table-responsive\">\r\n                            <table class=\"table table-striped table-hover mb-0\">\r\n                                <thead class=\"table-dark\">\r\n                                    <tr>\r\n                                        <th class=\"sortable\" data-sort=\"name\">Column Name <i class=\"bi bi-sort-down\"></i></th>\r\n                                        <th class=\"sortable\" data-sort=\"type\">Data Type <i class=\"bi bi-sort\"></i></th>\r\n                                        <th class=\"sortable\" data-sort=\"logical\">Logical Name <i class=\"bi bi-sort\"></i></th>\r\n                                        <th class=\"sortable\" data-sort=\"description\">Description <i class=\"bi bi-sort\"></i></th>\r\n                                        <th class=\"sortable\" data-sort=\"example\">Example <i class=\"bi bi-sort\"></i></th>\r\n                                        <th class=\"sortable\" data-sort=\"redacted\">Redacted <i class=\"bi bi-sort\"></i></th>\r\n                                        <th class=\"sortable\" data-sort=\"tokenized\">Tokenized <i class=\"bi bi-sort\"></i></th>\r\n                                        <th class=\"sortable\" data-sort=\"filter\">Filter <i class=\"bi bi-sort\"></i></th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody id=\"columnsTableBody\">\r\n                                    ${columnsHtml}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <!-- Pagination controls -->\r\n                    <div class=\"card-footer\">\r\n                        <div class=\"d-flex flex-column flex-md-row justify-content-between align-items-center gap-2\">\r\n                            <div class=\"entries-info\">\r\n                                Showing <span id=\"startEntry\">1</span> to <span id=\"endEntry\">3</span> of <span id=\"totalEntries\">0</span> entries\r\n                            </div>\r\n                            <div class=\"d-flex align-items-center gap-3\">\r\n                                <select id=\"pageSize\" class=\"form-select form-select-sm w-auto\">\r\n                                    <option value=\"2\" selected>2 rows</option>\r\n                                    <option value=\"10\">10 rows</option>\r\n                                    <option value=\"25\">25 rows</option>\r\n                                    <option value=\"50\">50 rows</option>\r\n                                </select>\r\n                                <nav aria-label=\"Table navigation\" class=\"d-flex justify-content-center flex-grow-1\">\r\n                                    <ul class=\"pagination pagination-sm mb-0\" id=\"paginationNumbers\">\r\n                                        <li class=\"page-item\" id=\"prevPage\">\r\n                                            <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\r\n                                                <span aria-hidden=\"true\">&laquo;</span>\r\n                                            </a>\r\n                                        </li>\r\n                                        <!-- Page numbers will be inserted here -->\r\n                                        <li class=\"page-item\" id=\"nextPage\">\r\n                                            <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\r\n                                                <span aria-hidden=\"true\">&raquo;</span>\r\n                                            </a>\r\n                                        </li>\r\n                                    </ul>\r\n                                </nav>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n\r\n                    \r\n                    <div class=\"modal fade\" id=\"requestDatasetModal\" tabindex=\"-1\" aria-hidden=\"true\">\r\n                        <div class=\"modal-dialog\">\r\n                            <div class=\"modal-content\">\r\n                                <div class=\"modal-header\">\r\n                                    <h5 class=\"modal-title\">Request Dataset</h5>\r\n                                    <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\r\n                                </div>\r\n                                <div class=\"modal-body\" id=\"requestDatasetModalBody\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\n                const styles = `\r\n                <style>\r\n                    .sortable { cursor: pointer; }\r\n                    .sortable i { font-size: 0.8rem; margin-left: 5px; opacity: 0.5; }\r\n                    td code { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 200px; display: inline-block; }\r\n                    .card-header .btn {\r\n                        margin-left: 15px;\r\n                        font-weight: 500;\r\n                    }\r\n                    \r\n                    .card-header .d-flex {\r\n                        width: 100%;\r\n                    }\r\n                    \r\n                    .card-header h2 {\r\n                        margin: 0;\r\n                        flex: 1;\r\n                    }\r\n                    \r\n                    .card-header .btn {\r\n                        white-space: nowrap;\r\n                    }\r\n                </style>\r\n            `;\n                this.element.innerHTML = styles + datasetHtml;\n                setTimeout(() => {\n                    const requestDatasetModal = document.getElementById('requestDatasetModal');\n                    const requestDatasetBtn = document.getElementById('requestDatasetBtn');\n                    let currentSortColumn = \"name\";\n                    let currentSortDirection = \"desc\";\n                    let currentPage = 1;\n                    let rowsPerPage = 2;\n                    let filteredRows = [];\n                    // Replace the existing sortTable function with this updated version:\n                    function sortTable(tableId, columnIndex, columnName) {\n                        const table = document.getElementById(tableId);\n                        if (!table)\n                            return;\n                        const tbody = table.querySelector('tbody');\n                        if (!tbody)\n                            return;\n                        const rows = Array.from(tbody.querySelectorAll('tr'));\n                        // Update sort direction and headers\n                        if (currentSortColumn === columnName) {\n                            currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';\n                        }\n                        else {\n                            currentSortColumn = columnName;\n                            currentSortDirection = 'asc';\n                        }\n                        // Sort the rows\n                        filteredRows = rows.sort((a, b) => {\n                            const aValue = (a.cells[columnIndex].textContent || '').trim();\n                            const bValue = (b.cells[columnIndex].textContent || '').trim();\n                            return currentSortDirection === 'asc'\n                                ? aValue.localeCompare(bValue)\n                                : bValue.localeCompare(aValue);\n                        });\n                        updateTable();\n                    }\n                    // Add these new functions:\n                    function updateTable() {\n                        const tbody = document.getElementById('columnsTableBody');\n                        if (!tbody)\n                            return;\n                        // Calculate pagination\n                        const startIndex = (currentPage - 1) * rowsPerPage;\n                        const endIndex = startIndex + rowsPerPage;\n                        const paginatedRows = filteredRows.slice(startIndex, endIndex);\n                        // Update table content\n                        tbody.innerHTML = '';\n                        paginatedRows.forEach(row => tbody.appendChild(row.cloneNode(true)));\n                        // Update pagination info\n                        updatePaginationInfo();\n                        updatePaginationNumbers(); // Add this line\n                    }\n                    function updatePaginationInfo() {\n                        const totalRows = filteredRows.length;\n                        const startEntry = Math.min((currentPage - 1) * rowsPerPage + 1, totalRows);\n                        const endEntry = Math.min(currentPage * rowsPerPage, totalRows);\n                        document.getElementById('startEntry').textContent = startEntry.toString();\n                        document.getElementById('endEntry').textContent = endEntry.toString();\n                        document.getElementById('totalEntries').textContent = totalRows.toString();\n                        // Update pagination buttons state\n                        const prevPageBtn = document.getElementById('prevPage');\n                        const nextPageBtn = document.getElementById('nextPage');\n                        if (prevPageBtn) {\n                            prevPageBtn.classList.toggle('disabled', currentPage === 1);\n                        }\n                        if (nextPageBtn) {\n                            nextPageBtn.classList.toggle('disabled', endEntry >= totalRows);\n                        }\n                    }\n                    // Add this function with the other pagination functions\n                    function updatePaginationNumbers() {\n                        var _a;\n                        const paginationList = document.getElementById('paginationNumbers');\n                        if (!paginationList)\n                            return;\n                        const totalPages = Math.ceil(filteredRows.length / rowsPerPage);\n                        const prevButton = paginationList.querySelector('#prevPage');\n                        const nextButton = paginationList.querySelector('#nextPage');\n                        // Remove all existing number buttons\n                        const existingNumbers = paginationList.querySelectorAll('.page-number');\n                        existingNumbers.forEach(num => num.remove());\n                        // Add page numbers\n                        for (let i = 1; i <= totalPages; i++) {\n                            const pageItem = document.createElement('li');\n                            pageItem.className = `page-item page-number ${currentPage === i ? 'active' : ''}`;\n                            const pageLink = document.createElement('a');\n                            pageLink.className = 'page-link';\n                            pageLink.href = '#';\n                            pageLink.textContent = i.toString();\n                            pageLink.addEventListener('click', (e) => {\n                                e.preventDefault();\n                                currentPage = i;\n                                updateTable();\n                            });\n                            pageItem.appendChild(pageLink);\n                            (_a = nextButton === null || nextButton === void 0 ? void 0 : nextButton.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(pageItem, nextButton);\n                        }\n                        // Update prev/next button states\n                        if (prevButton) {\n                            prevButton.classList.toggle('disabled', currentPage === 1);\n                        }\n                        if (nextButton) {\n                            nextButton.classList.toggle('disabled', currentPage === totalPages);\n                        }\n                    }\n                    function CreateRequest() {\n                        var _a;\n                        const modalBody = document.getElementById('requestDatasetModalBody');\n                        const modalElement = document.getElementById('requestDatasetModal');\n                        if (!modalBody || !modalElement || !((_a = window.bootstrap) === null || _a === void 0 ? void 0 : _a.Modal)) {\n                            console.error('Bootstrap Modal is not available');\n                            return;\n                        }\n                        const modal = new (window.bootstrap.Modal)(modalElement);\n                        const formHtml = `\r\n                        <form id=\"requestForm\">\r\n                            <div class=\"mb-3\">\r\n                                <label for=\"RequestName\" class=\"form-label\">Request Name</label>\r\n                                <input id=\"RequestName\" class=\"form-control\" placeholder=\"Name for this request\" required>\r\n                            </div>\r\n                            <div class=\"mb-3\">\r\n                                <label for=\"ProjectID\" class=\"form-label\">Assist Project</label>\r\n                                <select id=\"ProjectID\" class=\"form-select\" required>\r\n                                    <option value=\"\">Select a Project</option>\r\n                                    <option value=\"82\">Project 1</option>\r\n                                    <option value=\"84\">Project 2</option>\r\n                                    <option value=\"85\">Project 3</option>\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"mb-3\">\r\n                                <label for=\"ScheduleRefresh\" class=\"form-label\">Scheduled Refresh</label>\r\n                                <select id=\"ScheduleRefresh\" class=\"form-select\">\r\n                                    <option value=\"No Refresh\">No Refresh</option>\r\n                                    <option value=\"Daily\">Daily</option>\r\n                                    <option value=\"Weekly\">Weekly</option>\r\n                                    <option value=\"Monthly\">Monthly</option>\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"d-flex justify-content-between\">\r\n                                <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n                                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\r\n                            </div>\r\n                        </form>\r\n                    `;\n                        modalBody.innerHTML = formHtml;\n                        // Initialize Bootstrap modal\n                        modal.show();\n                        const requestForm = document.getElementById('requestForm');\n                        if (requestForm) {\n                            requestForm.addEventListener('submit', function (e) {\n                                e.preventDefault();\n                                alert('Request submitted successfully!');\n                                modal.hide();\n                            });\n                        }\n                    }\n                    if (requestDatasetBtn) {\n                        requestDatasetBtn.addEventListener('click', CreateRequest);\n                    }\n                    const mainTableHeaders = document.querySelectorAll('.table th.sortable');\n                    mainTableHeaders.forEach((header, index) => {\n                        header.addEventListener('click', function () {\n                            const sortType = this.getAttribute('data-sort');\n                            if (sortType) {\n                                sortTable('columnsTableBody', index, sortType);\n                            }\n                        });\n                    });\n                    // Initialize with default sort\n                    sortTable('columnsTableBody', 0, 'name');\n                    // Initialize pagination controls\n                    const pageSize = document.getElementById('pageSize');\n                    const prevPageBtn = document.getElementById('prevPage');\n                    const nextPageBtn = document.getElementById('nextPage');\n                    if (pageSize) {\n                        pageSize.addEventListener('change', (e) => {\n                            rowsPerPage = parseInt(e.target.value);\n                            currentPage = 1;\n                            updateTable();\n                        });\n                    }\n                    if (prevPageBtn) {\n                        prevPageBtn.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            if (currentPage > 1) {\n                                currentPage--;\n                                updateTable();\n                            }\n                        });\n                    }\n                    if (nextPageBtn) {\n                        nextPageBtn.addEventListener('click', (e) => {\n                            e.preventDefault();\n                            const maxPages = Math.ceil(filteredRows.length / rowsPerPage);\n                            if (currentPage < maxPages) {\n                                currentPage++;\n                                updateTable();\n                            }\n                        });\n                    }\n                    // Initialize the table with pagination\n                    filteredRows = Array.from(document.querySelectorAll('#columnsTableBody tr'));\n                    updateTable();\n                }, 100);\n            }\n            catch (ex) {\n                console.error(\"Error:\", ex);\n                const error = ex;\n                if (error && error.message) {\n                    this.errorCallback(\"Error\", \"Failed to build the dataset page\", error.message, this.element);\n                }\n            }\n        });\n        console.log(params);\n        this.loadResources();\n    }\n    loadBootstrap() {\n        return new Promise((resolve, reject) => {\n            var _a;\n            if ((_a = window.bootstrap) === null || _a === void 0 ? void 0 : _a.Modal) {\n                resolve();\n                return;\n            }\n            const script = document.createElement('script');\n            script.src = 'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js';\n            script.integrity = 'sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p';\n            script.crossOrigin = 'anonymous';\n            script.onload = () => resolve();\n            script.onerror = () => reject(new Error('Failed to load Bootstrap'));\n            document.head.appendChild(script);\n        });\n    }\n}\nconst definition = {\n    version: \"1.0.0\",\n    embedding: {\n        destroy: (element) => {\n            element.innerHTML = \"\";\n            const embedInstance = element.instance;\n            if (embedInstance) {\n                embedInstance.dispose();\n                delete element.instance;\n                console.log('Instance disposed.');\n            }\n        },\n        run: (element, entityUrl, paramValues, settings, errorCallback) => {\n            const instance = new CustomEmbed(element, entityUrl, paramValues, settings, errorCallback);\n            element.instance = instance;\n        }\n    }\n};\n\n\n//# sourceURL=webpack://@trustedresearchenvironment/webpack-ts-example/./index.ts?");

/***/ }),

/***/ "./library-base.ts":
/*!*************************!*\
  !*** ./library-base.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LibraryBase: () => (/* binding */ LibraryBase)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass LibraryBase {\n    constructor(element, entityUrl, paramValues, settings, errorCallback) {\n        this.loadResourceFiles = () => __awaiter(this, void 0, void 0, function* () {\n        });\n        this.setupEventListeners = () => {\n        };\n        this.dispose = () => {\n        };\n        this.element = element;\n        this.entityUrl = entityUrl;\n        this.paramValues = paramValues;\n        this.settings = settings;\n        this.errorCallback = errorCallback;\n        const embedTypeSetting = this.getSettingValue('embedType');\n        const embedIdSetting = this.getSettingValue('embedId');\n        this.embedType = +(embedTypeSetting === null || embedTypeSetting === void 0 ? void 0 : embedTypeSetting.value);\n        this.embedId = +(embedIdSetting === null || embedIdSetting === void 0 ? void 0 : embedIdSetting.value);\n        this.setupEventListeners();\n    }\n    getSettingValue(name) {\n        var matches = this.settings.filter(x => x.name == name);\n        if (matches.length > 0) {\n            return matches[0];\n        }\n        else {\n            return undefined;\n        }\n    }\n    ;\n    getParamValue(id) {\n        var matches = this.paramValues.filter(x => x.id == id);\n        if (matches.length > 0) {\n            return matches[0];\n        }\n        else {\n            return undefined;\n        }\n    }\n    ;\n    getQueryStringParameter(url, key) {\n        var parts = url.split(\"?\");\n        if (parts.length === 1)\n            return undefined;\n        var paramKeys = parts[1].split(\"&\").map(x => {\n            var keyValuePair = x.split(\"=\");\n            return {\n                key: keyValuePair[0],\n                value: keyValuePair[1]\n            };\n        });\n        var match = paramKeys.find(x => x.key.toLocaleUpperCase() === key.toLocaleUpperCase());\n        return match === undefined ? undefined : match.value;\n    }\n}\n\n\n//# sourceURL=webpack://@trustedresearchenvironment/webpack-ts-example/./library-base.ts?");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ var __webpack_exports__definition = __webpack_exports__.definition;
/******/ export { __webpack_exports__definition as definition };
/******/ 
